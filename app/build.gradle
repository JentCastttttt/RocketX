apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-parcelize'
apply plugin: 'com.alibaba.arouter'

//放在所有的插件最后一行
if (!Boolean.parseBoolean(uploadMaven)) {
    apply plugin: 'com.rocketx'
}


android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion


    defaultConfig {
        applicationId rootProject.ext.android.applicationId
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode 1
        versionName "1.0"

    }


    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    flavorDimensions 'testbuild'
    productFlavors {
        develop {
            manifestPlaceholders = [channel: "develop", build_type: "develop"]
        }
        xtest {
            manifestPlaceholders = [channel: "test", build_type: "xtest"]
        }
        formal {
            manifestPlaceholders = [channel: "test", build_type: "formal"]
        }
    }


    buildFeatures {
        dataBinding = true
        viewBinding = true
    }

    //配置插件编译项
    if (!Boolean.parseBoolean(uploadMaven)) {
        RocketX {
            openLog = true
            //剔除模块不打成 aar
            excludeModule = [":xxx"]
            dexMergeIncremental = true
        }
    }


}

dependencies {

    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.3.0'

    implementation "com.alibaba:arouter-compiler:1.2.2"
    implementation "com.alibaba:arouter-api:1.5.0"

    implementation project(':projectA')
//    implementation 'com.projecta:projecta:1.0'
    implementation project(':libbz:projectB')
    implementation project(':projectC')
    implementation project(':libAnnotations')
}



